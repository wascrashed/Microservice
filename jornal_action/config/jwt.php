<?php
return [

    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Secret
    |--------------------------------------------------------------------------
    |
    | Укажите секретный ключ, который будет использоваться для подписи токенов.
    | Обязательно установите значение этого ключа в вашем файле .env,
    | чтобы генерировать и проверять токены. Для генерации ключа можно
    | использовать команду `php artisan jwt:secret`.
    |
    */

    'secret' => env('JWT_SECRET'),

    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Keys
    |--------------------------------------------------------------------------
    |
    | Укажите ключи, которые будут использоваться для подписи токенов.
    | В зависимости от используемого алгоритма подписи (симметричного или
    | асимметричного), может потребоваться указать отдельные пути к
    | открытому и закрытому ключам.
    |
    */

    'keys' => [
        'public' => env('JWT_PUBLIC_KEY'),
        'private' => env('JWT_PRIVATE_KEY'),
        'passphrase' => env('JWT_PASSPHRASE'),
    ],

    /*
    |--------------------------------------------------------------------------
    | JWT time to live
    |--------------------------------------------------------------------------
    |
    | Укажите срок действия токена в минутах.
    | По истечении этого времени токен станет недействительным.
    | Значение по умолчанию: 60 минут.
    |
    */

    'ttl' => env('JWT_TTL', 60),

    /*
    |--------------------------------------------------------------------------
    | Refresh time to live
    |--------------------------------------------------------------------------
    |
    | Укажите срок действия токена обновления в минутах.
    | Пользователь может обновить свой токен в пределах этого времени
    | с момента создания исходного токена.
    | Значение по умолчанию: 2 недели.
    |
    */

    'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),

    /*
    |--------------------------------------------------------------------------
    | JWT hashing algorithm
    |--------------------------------------------------------------------------
    |
    | Укажите алгоритм хеширования, который будет использоваться для подписи токена.
    |
    */

    'algo' => env('JWT_ALGO', Tymon\JWTAuth\Providers\JWT\Provider::ALGO_HS256),

    /*
    |--------------------------------------------------------------------------
    | Required Claims
    |--------------------------------------------------------------------------
    |
    | Укажите обязательные поля, которые должны присутствовать в токене.
    | Если какое-либо из этих полей отсутствует, будет сгенерировано исключение TokenInvalidException.
    |
    */

    'required_claims' => [
        'iss',
        'iat',
        'exp',
        'nbf',
        'sub',
        'jti',
    ],

    /*
    |--------------------------------------------------------------------------
    | Persistent Claims
    |--------------------------------------------------------------------------
    |
    | Укажите дополнительные поля, которые будут сохраняться при обновлении токена.
    | Ключи 'sub' и 'iat' сохраняются автоматически, дополнительно к этим полям.
    |
    | Примечание: Если поле не существует в исходном токене, оно будет проигнорировано.
    |
    */

    'persistent_claims' => [
        // 'foo',
        // 'bar',
    ],

    /*
    |--------------------------------------------------------------------------
    | Lock Subject
    |--------------------------------------------------------------------------
    |
    | Определите, должно ли в токене автоматически добавляться поле `prv`.
    | Это необходимо для предотвращения подделки аутентификации,
    | если у вас есть несколько моделей аутентификации.
    |
    */

    'lock_subject' => true,

    /*
    |--------------------------------------------------------------------------
    | Leeway
    |--------------------------------------------------------------------------
    |
    | Данный параметр предоставляет некоторую гибкость временным меткам в токене.
    | Если на ваших серверах возможно небольшое отклонение времени,
    | вы можете указать это значение для учета этого смещения.
    |
    | Укажите значение в секундах, только если это необходимо.
    |
    */

    'leeway' => env('JWT_LEEWAY', 0),

    /*
    |--------------------------------------------------------------------------
    | Blacklist Enabled
    |--------------------------------------------------------------------------
    |
    | Укажите, включена ли функция черного списка токенов.
    | Если вам не нужно это функционал, установите значение false.
    |
    */

    'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),

    /*
    | -------------------------------------------------------------------------
    | Blacklist Grace Period
    | -------------------------------------------------------------------------
    |
    | Если несколько запросов параллельно выполняются с одним и тем же токеном,
    | то некоторые из них могут завершиться неудачно из-за обновления токена.
    |
    | Установите период ожидания (в секундах), чтобы предотвратить такую ситуацию.
    |
    */

    'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', 0),

    /*
    |--------------------------------------------------------------------------
    | Cookies encryption
    |--------------------------------------------------------------------------
    |
    | По умолчанию Laravel шифрует cookie в целях безопасности.
    | Если вы решите не расшифровывать cookie, вам необходимо настроить Laravel
    | на незашифровывание токена, добавив его имя в массив $except,
    | доступный в промежуточном ПО "EncryptCookies" в Laravel.
    | См. https://laravel.com/docs/master/responses#cookies-and-encryption
    | для получения дополнительной информации.
    |
    | Установите значение true, если вы хотите расшифровать cookie.
    |
    */

    'decrypt_cookies' => false,

    /*
    |--------------------------------------------------------------------------
    | Providers
    |--------------------------------------------------------------------------
    |
    | Укажите различные поставщики, используемые в пакете.
    |
    */

    'providers' => [

        /*
        |--------------------------------------------------------------------------
        | JWT Provider
        |--------------------------------------------------------------------------
        |
        | Укажите поставщика, который используется для создания и декодирования токенов.
        |
        */

        'jwt' => Tymon\JWTAuth\Providers\JWT\Lcobucci::class,

        /*
        |--------------------------------------------------------------------------
        | Authentication Provider
        |--------------------------------------------------------------------------
        |
        | Укажите поставщика, используемого для аутентификации пользователей.
        |
        */

        'auth' => Tymon\JWTAuth\Providers\Auth\Illuminate::class,

        /*
        |--------------------------------------------------------------------------
        | Storage Provider
        |--------------------------------------------------------------------------
        |
        | Укажите поставщика, используемого для хранения токенов в черном списке.
        |
        */

        'storage' => Tymon\JWTAuth\Providers\Storage\Illuminate::class,

    ],

];
